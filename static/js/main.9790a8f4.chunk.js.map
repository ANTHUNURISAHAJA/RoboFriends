{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","container/App.js","index.js"],"names":["Boolean","window","location","hostname","match","card","params","id","name","email","className","alt","src","CardList","robots","map","user","i","Card","key","SearchBox","SearchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchvalue","target","value","fetch","then","response","json","users","filteredRobos","filter","robot","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"8LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCFSC,EAdF,SAACC,GAAY,IACjBC,EAAgBD,EAAhBC,GAAGC,EAAaF,EAAbE,KAAKC,EAAQH,EAARG,MAChB,OAEQ,yBAAKC,UAAY,uDACf,6BACG,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,oBAEzB,gCAAMC,EAAN,KACA,+BAAKC,EAAL,OCOKI,EAfE,SAAC,GAAe,IAAbC,EAAY,EAAZA,OAEhB,OACC,6BAEKA,EAAOC,KAAI,SAACC,EAAOC,GAClB,OAAQ,kBAACC,EAAD,CAAMC,IAAKF,EAAGV,GAAIS,EAAKT,GAAIC,KAAMQ,EAAKR,KAAMC,MAAOO,EAAKP,aCS5DW,EAfG,SAAC,GAClB,IADmBC,EACpB,EADoBA,aAEnB,OAEM,yBAAKX,UAAU,OACb,2BACCY,KAAK,SACLC,YAAY,eACZC,SAAUH,EACVX,UAAW,uCCANe,EAVA,SAACC,GAEf,OAEM,yBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACjEJ,EAAMK,SADT,MCiBQC,E,kDAlBd,WAAYN,GACX,IAAD,8BACC,cAAMA,IACDO,MAAO,CACXC,UAAW,GAHb,E,8DAOqBC,EAAQC,GACvBC,KAAKC,SAAS,CAACJ,UAAW,M,+BAK/B,OAAOG,KAAKJ,MAAMC,SAAW,wDAAqCG,KAAKX,MAAMK,a,GAhBnDQ,aC8CbC,G,6DAvCd,aAAc,IAAD,8BACZ,gBAaDC,eAAiB,SAACC,GACZ,EAAKJ,SAAS,CAACK,YAAYD,EAAME,OAAOC,SAb7C,EAAKZ,MAAQ,CACPnB,OAAQ,GACR6B,YAAa,IAJP,E,gEAQQ,IAAD,OACjBG,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAU,EAAKZ,SAAS,CAAExB,OAAQoC,S,+BAQ5C,IAAD,EACgCb,KAAKJ,MAA5BnB,EADT,EACSA,OAAO6B,EADhB,EACgBA,YACTQ,EAAgBrC,EAAOsC,QAAO,SAAAC,GAC9B,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASZ,EAAYW,kBACrD,OAAQxC,EAAO0C,OAGlB,yBAAK9C,UAAY,MACX,8CACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACG,kBAAC,EAAD,CAAW3B,OAAUqC,OAP7B,gD,GA1BUZ,cCAlBkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SPuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLiC,QAAQjC,MAAMA,EAAMkC,a","file":"static/js/main.9790a8f4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst card = (params) => {\r\n\tconst { id,name,email }=params;\r\n\treturn (\r\n         \r\n         <div className = 'tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n           <div>\r\n              <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n           </div>\r\n          <h1> {name} </h1>\r\n          <p> {email} </p>\r\n         </div>\r\n       );\r\n}\r\n\r\nexport default card;","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) =>{\r\n\r\n    return (  \r\n    \t<div>\r\n    \t{\r\n          robots.map((user , i) => {\r\n          \treturn (<Card key={i} id={user.id} name={user.name} email={user.email}/>);\r\n          })\r\n        }\r\n    \t</div>\r\n\r\n    \t);\r\n}\r\n\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\n\r\nconst SearchBox = ({SearchChange}) =>\r\n{\r\n\treturn (\r\n\r\n       <div className='pa2'>\r\n         <input \r\n\t         type=\"search\" \r\n\t         placeholder=\"Search Robos\" \r\n\t         onChange={SearchChange} \r\n\t         className ='pa3 ba b--green bg-lightest-blue'\r\n         />\r\n       </div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>\r\n{\r\n\treturn(\r\n\r\n       <div style={{overflow: 'scroll', border: '5px solid black', height: '800px'}}> \r\n         {props.children};\r\n       </div>\r\n\t\t);\r\n}\r\n\r\nexport default Scroll;","import React , { Component } from 'react'\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\tthis.state ={\r\n\t\t\thasError : false\r\n\t\t}\r\n\t}\r\n   \r\n    componentDidCatch(error , info){\r\n       this.setState({hasError : true})\r\n    } \r\n\r\n\trender()\r\n\t{\r\n\t\treturn this.state.hasError ? <h1> Something went wrong!! </h1> : (this.props.children);\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React , { Component } from 'react'\r\nimport CardList from'../components/CardList.js';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\nimport './App.css'\r\nimport 'tachyons';\r\n\r\nclass App extends Component\r\n{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t       robots: [],\r\n\t       searchvalue: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response=> response.json())\r\n      .then(users => {this.setState({ robots: users})});\r\n    }\r\n\r\n\tonSearchChange = (event)=>{\r\n       this.setState({searchvalue:event.target.value});\r\n       \r\n\t}\r\n\trender()\r\n\t{\r\n\t\tconst { robots,searchvalue } = this.state;\r\n\t\tconst filteredRobos = robots.filter(robot =>{\r\n       \treturn robot.name.toLowerCase().includes(searchvalue.toLowerCase())})\r\n       \treturn !robots.length ? \r\n       \t<h1> Loading... </h1> :\r\n\t\t(\r\n\t\t   <div className = 'tc'>\r\n           <h1> Robo Friends </h1>\r\n           <SearchBox SearchChange={this.onSearchChange}/>\r\n           <Scroll>\r\n             <ErrorBoundary>\r\n                <CardList  robots = {filteredRobos} />\r\n             </ErrorBoundary>  \r\n           </Scroll>\r\n           </div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './container/App.js'\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}